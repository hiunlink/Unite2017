#pragma kernel CSMain

// Defines
#define SIZEX 32
#define SIZEY 32
#define GROUPSIZE SIZEX*SIZEY

struct Accum
{
	int Opaque;
	int Transparent;
};

groupshared Accum accumulator[GROUPSIZE];

Texture2D<float2> Overdraw;
RWStructuredBuffer<Accum> Output;

[numthreads(SIZEX,SIZEY,1)]
void CSMain (uint3 gid : SV_GroupID, uint3 inp : SV_DispatchThreadID, uint gtidx : SV_GroupIndex)
{
	accumulator[gtidx].Opaque = (int)(Overdraw[inp.xy].x * 1024);
	accumulator[gtidx].Transparent = (int)(Overdraw[inp.xy].y * 1024);
	
	// Wait for all
	GroupMemoryBarrierWithGroupSync();
	
	[unroll]
	for (uint ix = GROUPSIZE >> 1; ix > 0; ix = ix >> 1)
	{
		if (gtidx < ix)
		{
			accumulator[gtidx].Opaque = (accumulator[gtidx].Opaque + accumulator[gtidx + ix].Opaque);
			accumulator[gtidx].Transparent = (accumulator[gtidx].Transparent + accumulator[gtidx + ix].Transparent);
		}
		GroupMemoryBarrierWithGroupSync();
	}
	
	if (gtidx != 0) return;
	
	Output[gid.y * 128 + gid.x].Opaque = accumulator[0].Opaque;
	Output[gid.y * 128 + gid.x].Transparent = accumulator[0].Transparent;
}
